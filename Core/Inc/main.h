/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.h
 * @brief          : Header for main.c (application-wide types and constants).
 *
 * This header collects:
 *  - Global configuration macros for pack topology and timing
 *  - Pack/module data structures (cell/thermistor readings, summaries)
 *  - CAN message buffers used by the application layer
 *  - MCU pin definitions generated by CubeMX
 *
 * Conventions:
 *  - Voltages and temperatures are stored as integers (units noted per field).
 *  - Array sizes derive from NUM_MOD / NUM_CELL_PER_MOD / NUM_THERM_PER_MOD.
 *  - Timing values are in milliseconds unless otherwise stated.
 ******************************************************************************
 */
/* USER CODE END Header */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __MAIN_H
#define __MAIN_H

#ifdef __cplusplus
extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
#include "stm32f1xx_hal.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Exported types ------------------------------------------------------------*/
/* USER CODE BEGIN ET */

/* USER CODE BEGIN Private defines */
/* ===== Application Configuration ============================================
 * The following macros describe the pack topology, measurement group sizes,
 * and task cadence. They are used across modules to dimension arrays and
 * control periodic behavior.
 *
 * Notes:
 *  - NUM_MOD: number of slave boards (modules) in the daisy chain.
 *  - NUM_CELL_PER_MOD: series cells monitored per module.
 *  - NUM_THERM_PER_MOD: thermistors per module (external to ADBMS AUX count).
 *  - NUM_AUX_GROUP * NUM_MOD = total AUX channels returned by RDAUX pages.
 *  - CYCLETIME_CAP caps the main BMS loop/update period (ms).
 *  - BALANCE is a feature toggle (0 = disabled at compile time).
 *  - MAX_*_CAPACITY are nominal capacities (mAh) used for SoC/estimation.
 */
#define NUM_MOD					1	//1 slave board
#define NUM_CELL_PER_MOD	 	14	//1 slave board
#define NUM_CELLS				(NUM_MOD*NUM_CELL_PER_MOD)	//multiple slave board
#define NUM_THERM_PER_MOD		12
#define NUM_THERM_TOTAL			(NUM_MOD*NUM_THERM_PER_MOD)
#define NUM_AUX_GROUP			6
#define NUM_AUXES				(NUM_MOD*NUM_AUX_GROUP)
#define CYCLETIME_CAP			10  //60ms update delay
#define CAN_RECONNECTION_CHECK	500 //check can connection every 500ms
#define LED_HEARTBEAT_DELAY_MS	50  //50ms update delay
#define BALANCE 				0 	//FALSE
#define MAX_CELL_CAPACITY 		3000
#define MAX_BATTERY_CAPACITY 	(NUM_MOD* MAX_CELL_CAPACITY)
/* USER CODE END Private defines */

/**
 * @brief Per-pack aggregate values and summary status.
 *
 * Units:
 *  - cell_volt_*: millivolts (mV)
 *  - cell_temp_*: typically 0.1Â°C or raw ADC-derived units (project-defined)
 *  - sum_pack_voltage / hvsens_pack_voltage: millivolts (mV)
 *  - balance_status: bitfield per module (bit i = cell i discharging)
 *  - soc: microamp-seconds or project-defined scaled SoC accumulator
 *  - current: microamps or project-defined current units
 */
typedef struct AccumulatorData {
	uint16_t cell_volt_lowest;
	uint16_t cell_volt_highest;
	uint16_t cell_difference;
	uint16_t cell_temp_lowest;
	uint16_t cell_temp_highest;
	uint16_t sum_pack_voltage;
	uint16_t hvsens_pack_voltage;
	uint16_t balance_status[NUM_MOD];
    uint32_t soc; // microamps!!!!!
    uint32_t current;
} AccumulatorData;

/**
 * @brief Per-module measurement container.
 *
 * Notes:
 *  - cell_volt:     per-cell voltages for this module [mV]
 *  - cell_temp:     global thermistor vector (sized to NUM_THERM_TOTAL)
 *                   (Indexing scheme must be consistent across modules.)
 *  - average_*:     per-module averages (units follow source arrays)
 *  - read_auxreg:   raw AUX/GPIO reads (RDAUX pages) sized to NUM_AUXES
 *  - sid:           6-byte silicon ID (if supported/read)
 */
typedef struct ModuleData {
	uint16_t cell_volt[NUM_CELL_PER_MOD];
	uint16_t cell_temp[NUM_THERM_TOTAL];
	uint16_t average_volt;
	uint16_t average_temp;
	uint16_t sum_volt_module;
	uint16_t pressure;
	uint16_t humidity;
	uint16_t atmos_temp;
	uint16_t read_auxreg[NUM_AUXES];
    uint16_t dew_point;
    uint8_t sid[6];
} ModuleData;

typedef struct BalanceStatus {
	uint8_t balance_cells[NUM_CELL_PER_MOD];
	uint16_t balancing_cells;
}BalanceStatus;

typedef struct RDFCGB_buffer{
	uint8_t CFGBR[6];
	uint16_t VUV_12;
	uint16_t VOV_12;
}RDFCGB_buffer;

/**
 * @brief CAN transmission staging buffers.
 *
 * Layout:
 *  - TxHeader / TxMailbox: HAL CAN metadata for the next transmit.
 *  - *Buffer: 8-byte payload slices for voltage/thermistor/safety/summary/SoC/balance.
 *
 * Usage:
 *  - Populate the relevant buffer and header, then queue with HAL CAN APIs.
 *  - ID and DLC are configured in the associated source file before sending.
 */
typedef struct CANMessage{
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;
    uint8_t voltageBuffer[8];
    uint8_t thermistorBuffer[8];
    uint8_t summaryBuffer[8];
    uint8_t safetyBuffer[8];
    uint8_t socBuffer[8];
    uint8_t balanceStatus[8];
} CANMessage;

/* USER CODE END ET */

/* Exported constants --------------------------------------------------------*/
/* USER CODE BEGIN EC */

/* USER CODE END EC */

/* Exported macro ------------------------------------------------------------*/
/* USER CODE BEGIN EM */

/* USER CODE END EM */

/* Exported functions prototypes ---------------------------------------------*/
void Error_Handler(void);

/* USER CODE BEGIN EFP */

/* USER CODE END EFP */

/* Private defines -----------------------------------------------------------*/
/* ===== MCU Pin Mapping (auto-generated by CubeMX) ============================
 * These GPIO aliases are used by board support code to access peripherals.
 * Adjust in .ioc and regenerate if hardware changes.
 */
#define Shunt_PIN_FOR_2A_Pin GPIO_PIN_2
#define Shunt_PIN_FOR_2A_GPIO_Port GPIOC
#define LTC_nCS_Pin GPIO_PIN_4
#define LTC_nCS_GPIO_Port GPIOA
#define MCU_ADC_VSENSE_Pin GPIO_PIN_5
#define MCU_ADC_VSENSE_GPIO_Port GPIOC
#define MCU_SHUTDOWN_SIGNAL_Pin GPIO_PIN_1
#define MCU_SHUTDOWN_SIGNAL_GPIO_Port GPIOB
#define MCU_HEARTBEAT_LED_Pin GPIO_PIN_6
#define MCU_HEARTBEAT_LED_GPIO_Port GPIOC

#ifdef __cplusplus
}
#endif

#endif /* __MAIN_H */
